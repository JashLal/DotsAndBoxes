import unittest
from src.board import Board

class TestBoard(unittest.TestCase):
    def test_move(self):
        def one_box_filled_with_vertical_edge():
            board = Board(3, 2)
            board.move(0, 1, True)
            board.move(2, 1, True)
            board.move(1, 2, True)
            self.assertFalse(board.board[0][0])
            self.assertFalse(board.board[1][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
            board.move(1, 0, True)
            self.assertTrue(board.board[0][0])
            self.assertFalse(board.board[1][1])
            self.assertEqual(1, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
        def two_boxes_filled_with_vertical_edge():
            board = Board(3, 2)
            board.move(0, 3, True)
            board.move(0, 5, True)
            board.move(2, 3, True)
            board.move(2, 5, True)
            board.move(1, 2, True)
            board.move(1, 6, True)
            self.assertFalse(board.board[0][2])
            self.assertFalse(board.board[1][3])
            self.assertFalse(board.board[0][4])
            self.assertFalse(board.board[1][5])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
            board.move(1, 4, True)
            self.assertTrue(board.board[0][2])
            self.assertFalse(board.board[1][3])
            self.assertTrue(board.board[0][4])
            self.assertFalse(board.board[1][5])
            self.assertEqual(2, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
        def one_box_filled_with_horizontal_edge():
            board = Board(3, 2)
            board.move(3, 0, False)
            board.move(3, 2, False)
            board.move(2, 1, False)
            self.assertFalse(board.board[2][0])
            self.assertFalse(board.board[3][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
            board.move(4, 1, False)
            self.assertFalse(board.board[2][0])
            self.assertTrue(board.board[3][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(1, board.player_two_score)
        def two_boxes_filled_with_horizontal_edge():
            board = Board()
            board.move(1, 0, False)
            board.move(3, 0, False)
            board.move(1, 2, False)
            board.move(3, 2, False)
            board.move(0, 1, False)
            board.move(4, 1, False)
            self.assertFalse(board.board[0][0])
            self.assertFalse(board.board[1][1])
            self.assertFalse(board.board[2][0])
            self.assertFalse(board.board[3][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
            board.move(2, 1, False)
            self.assertFalse(board.board[0][0])
            self.assertTrue(board.board[1][1])
            self.assertFalse(board.board[2][0])
            self.assertTrue(board.board[3][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(2, board.player_two_score)
        one_box_filled_with_vertical_edge()
        two_boxes_filled_with_vertical_edge()
        one_box_filled_with_horizontal_edge()
        two_boxes_filled_with_horizontal_edge()
    
    def test_game_over(self):
        board = Board(1, 1)
        self.assertFalse(board.game_over())
        board.move(1, 0, True)
        board.move(1, 2, True)
        board.move(0, 1, True)
        self.assertFalse(board.game_over())
        board.move(2, 1, True)
        self.assertTrue(board.game_over())

    def test_revert_move(self):
        def revert_one_box():
            board = Board(3, 2)
            board.move(0, 1, True)
            board.move(2, 1, True)
            board.move(1, 2, True)
            board.move(1, 0, True)
            self.assertTrue(board.board[0][0])
            self.assertFalse(board.board[1][1])
            self.assertEqual(1, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
            board.revert_move(0, 1)
            self.assertFalse(board.board[0][0])
            self.assertFalse(board.board[1][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
            board.move(0, 1, False)
            self.assertFalse(board.board[0][0])
            self.assertTrue(board.board[1][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(1, board.player_two_score)
            board.revert_move(1, 0)
            self.assertFalse(board.board[0][0])
            self.assertFalse(board.board[1][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
        def revert_two_horizontal_boxes():
            board = Board(3, 2)
            board.move(0, 3, True)
            board.move(0, 5, True)
            board.move(2, 3, True)
            board.move(2, 5, True)
            board.move(1, 2, True)
            board.move(1, 4, True)
            board.move(1, 6, True)
            self.assertTrue(board.board[0][2])
            self.assertFalse(board.board[1][3])
            self.assertTrue(board.board[0][4])
            self.assertFalse(board.board[1][5])
            self.assertEqual(2, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
            board.revert_move(1, 4)
            self.assertFalse(board.board[0][2])
            self.assertFalse(board.board[1][3])
            self.assertFalse(board.board[0][4])
            self.assertFalse(board.board[1][5])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
        def revert_two_vertical_boxes():
            board = Board()
            board.move(1, 0, False)
            board.move(3, 0, False)
            board.move(1, 2, False)
            board.move(3, 2, False)
            board.move(0, 1, False)
            board.move(2, 1, False)
            board.move(4, 1, False)
            self.assertFalse(board.board[0][0])
            self.assertTrue(board.board[1][1])
            self.assertFalse(board.board[2][0])
            self.assertTrue(board.board[3][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(2, board.player_two_score)
            board.revert_move(2, 1)
            self.assertFalse(board.board[0][0])
            self.assertFalse(board.board[1][1])
            self.assertFalse(board.board[2][0])
            self.assertFalse(board.board[3][1])
            self.assertEqual(0, board.player_one_score)
            self.assertEqual(0, board.player_two_score)
        revert_one_box()
        revert_two_horizontal_boxes()
        revert_two_vertical_boxes()

if __name__ == "__main__":
    unittest.main()